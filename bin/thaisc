#!/usr/bin/env bash

# Credit https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within
ROOT_DIR=$(realpath "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"/..)
usage="$(basename "$0") [-h|--help] [-e|--environment -i|--implement play] -- thaisc deploy/test suite, ansible-playbook command wrapper
most of time, we run implement/test play inside admin container. and for generate/up/clean/admin run on host machine.
this script was created from my frequently used cmd. (Krittin Phornsiricharoenphant, oatkrittin@gmail.com)
(Required: ansible)

where:
    -h, --help        show usage info.
    -e, --environment inventory to run at, which available in inventories/* dir. (default=local)
    -i, --implement   either docker or ansible, (default=docker)
    play | subcmd     playbook which available on this thaisc project.
        generate(play)  - to generate docker-compose.yml for further use while locally developing.
        implement(play) - to automate deploy, which make changes on inventory you provided.
        test(play)      - Ansible Dry-run, focus on testing only, no changes will be made from this run.
        up(subcmd)      - Generate docker-compose.yml then run docker-compose up.
        clean(subcmd)   - (Caution!) actually this subcmd run set of docker cmd to clean containers.
                          It may prune all other existing/running project network/container/images
                          to get a clean environment.
        admin(subcmd)   - alias for > docker exec -it admin /bin/bash
"

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
       echo "$usage"
       exit
       ;;
    -e|--environment)
      ENV="$2"
      shift # past argument
      shift # past value
      ;;
    -i|--implement)
      IMPLEMENTATION="$2"
      shift # past argument
      shift # past value
      ;;
    -v|--verbose|-vvv)
      ANSIBLE_VERBOSE="$1"
      shift # past flag
      ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ -n $1 ]]; then
  PLAY="$1"
  INVENTORY=${ENV:=local}
  IMPLEMENTATION=${IMPLEMENTATION:=docker}
  case $PLAY in
    test|tests/test.yml)
    ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -i ${ROOT_DIR}/inventories/${INVENTORY}.ini --check ${ROOT_DIR}/tests/test.yml $ANSIBLE_VERBOSE
    ;;
    generate|generate.yml)
    docker build -t centos7-base:$(md5 Dockerfile | cut -d " " -f4) .
    ansible-playbook -i ${ROOT_DIR}/inventories/${INVENTORY}.ini ${ROOT_DIR}/generate.yml --extra-vars "slurm_implementation=$IMPLEMENTATION"
    ;;
    implement|implement.yml)
    ansible-playbook --ssh-common-args='-o StrictHostKeyChecking=no' -i ${ROOT_DIR}/inventories/${INVENTORY}.ini ${ROOT_DIR}/implement.yml $ANSIBLE_VERBOSE
    ;;
    up)
    docker build -t centos7-base:$(md5 Dockerfile | cut -d " " -f4) ..
    ansible-playbook -i ${ROOT_DIR}/inventories/${INVENTORY}.ini ${ROOT_DIR}/generate.yml --extra-vars "slurm_implementation=$IMPLEMENTATION"
    docker-compose up
    ;;
    clean)
    to_kill_list=$(docker ps \
      --filter "name=admin" \
      --filter "name=nfs" \
      --filter "name=freeipa-1" \
      --filter "name=slurmctld-1" \
      --filter "name=slurmdbd-1" \
      --filter "name=mysql-1" \
      --filter "name=tara-frontend-1" \
      --filter "name=tara-c-001" \
      --filter "name=tara-c-002" \
      --filter "name=tara-c-003" \
      --filter "name=tara-c-004" \
      --filter "name=tara-c-005" \
      --filter "name=tara-c-006" \
      --filter "name=tara-m-001" \
      --filter "name=tara-m-002" \
      --filter "name=tara-dgx1-001" \
      --filter "name=tara-dgx1-002" \
      -q
      )
    docker kill $to_kill_list
    docker network prune
    docker container prune
    docker images prune
    ;;
    admin)
    docker exec -it admin /bin/bash
    ;;
    *)
    ;;
  esac
fi